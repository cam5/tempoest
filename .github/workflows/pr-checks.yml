name: PR Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  validate:
    name: Validate PR
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch full history for better diff analysis
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'yarn'
      
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      
      - name: Check for TypeScript errors
        run: yarn build
      
      - name: Run tests with coverage
        run: yarn test --coverage --passWithNoTests
      
      - name: Check and fix code style
        run: yarn lint:fix
      
      - name: Validate package.json
        run: |
          # Check if package.json is valid
          node -e "require('./package.json')"
          echo "âœ… package.json is valid"
      
      - name: Check for security vulnerabilities
        run: yarn audit --level moderate
        continue-on-error: true
      
      - name: Comment PR with test results
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('ðŸ¤– PR Validation Results')
            );
            
            const body = `ðŸ¤– PR Validation Results
            
            âœ… TypeScript compilation: Passed
            âœ… Tests: Passed  
            âœ… Linting: Passed
            âœ… Package validation: Passed
            
            This PR is ready for review! ðŸš€`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
